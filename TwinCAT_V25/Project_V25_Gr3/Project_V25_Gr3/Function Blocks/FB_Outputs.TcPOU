<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Outputs" Id="{c3b6ff0e-0108-484e-aa5d-46cb83b00d7a}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_Outputs
VAR_INPUT
	eStatus 							: E_Status;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbWinchValveOutput 					: FB_ValveOutput;
	fbDisplacementControl				: FB_DisplacementControl;
	fbDisplacementValveOutput 			: FB_DisplacementValveOutput;
	
	fDisplacementControlSignal			: LREAL;
	fDisplacementNormalizedInput 		: LREAL := 1.0;
	fDisplacementControl_output	:LREAL;

	bEnableWinch 						: BOOL;
	bEnableDisplacement					: BOOL;
	bEnableMotion						: BOOL;
	fWinchValveInput 					: LREAL;
	fWinchValveNormalizedInput  		: LREAL;
	bEnableValveOutputWinch 			: BOOL; 
	bEnableValveOutputDisp	 			: BOOL;
	
	//Endpos
	
	fWinchEndUp_encoder					: LREAL := G_Parameters.stParam.fWinchEndStopPos;
	fWinchEndDown_encoder				: LREAL := G_Parameters.stParam.fWinchEndStopNeg;
	fWinchEndStopDown_soft				: LREAL := G_Parameters.stParam.fWinchEndStopNeg_soft;
	u									: LREAL;
	y									: LREAL;
	fTotaldistance_Neg					: LREAL;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF eStatus = E_Status.Running THEN
	G_IO.bEnablePCDV := TRUE;
	G_IO.bWinchValveEnable := TRUE;
ELSE
	G_IO.bEnablePCDV := FALSE;	
	G_IO.bWinchValveEnable := FALSE;
END_IF

/////Open breaks///
IF eStatus = E_Status.Running AND G_IO.bWinchEnable THEN
	G_IO.bOpenBrakes := TRUE;
ELSE 
		G_IO.bOpenBrakes := FALSE;
END_IF

////////////Manual Controls in use if auto not enabled/////////
IF G_IO.bManualSwitch AND NOT(G_Engineer_HMI.bManualControl_enable )THEN
bEnableMotion := G_IO.bWinchEnable;
fWinchValveInput := G_Sensors.fJoystickNormalizedY;



END_IF

/////////////////////AutoStartPos/////////////////////
IF G_IO.bAutoSwitch  AND G_Engineer_HMI.bAutoStartPosEnable  THEN
	bEnableMotion := G_Motion_Control.bOpenBreak;
	fWinchValveInput := G_Motion_Control.fWinchValveNormalizedInput;
END_IF

/////////////////////AutoSineMotion/////////////////////
IF G_IO.bAutoSwitch AND G_Engineer_HMI.bAutoSineMotionEnable THEN
	bEnableMotion := G_Motion_Control.bOpenBreak;
	fWinchValveInput := G_Motion_Control.fWinchValveNormalizedInput_sine;
END_IF

//Slik det er nå: Om Primary control blir koblet ut og Auto Start Poisiton ikke blir skrudd av er det siste verdi fra Autostart
//Som fortsettes å bli skrevet til valveutgangen 
//Løsninger: Skrive Auto Starrt Position til FALSE når Primary går av
//			Bare la det være fordi vi vet hvordan ting må styres

IF G_IO.bAutoSwitch AND NOT (G_Engineer_HMI.bAutoStartPosEnable) THEN /////Se over disse IF setningene///
    fWinchValveInput := 0.0;
END_IF


////Manual PosRef///
IF G_Engineer_HMI.bManualControl_enable AND G_IO.bManualSwitch THEN
	bEnableMotion := G_IO.bWinchEnable;
	fWinchValveInput := LIMIT(-1,  G_Motion_Control.fWinchValveNormalizedInput_joystick_posref, 1);	
END_IF

///////////////////// Winch //////////////////////////////
IF (eStatus = E_Status.Running) AND bEnableMotion OR G_Motion_Control.bOpenBreak THEN 
	G_IO.bOpenBrakes := TRUE;
	bEnableWinch := TRUE;
ELSE
	G_IO.bOpenBrakes := FALSE;
	bEnableWinch := FALSE;
END_IF


////////Soft End Stop////////////
fTotaldistance_Neg := fWinchEndDown_encoder - fWinchEndStopDown_soft;
u := (G_Sensors.fWinchEncoderPosition - fWinchEndStopDown_soft) / fTotaldistance_Neg;
y := 1 - ((3*u*u) - (2*u*u*u));
IF G_Sensors.fWinchEncoderPosition > fWinchEndStopDown_soft AND NOT (G_Engineer_HMI.bEndStopOverride) THEN
	fWinchValveNormalizedInput := fWinchValveInput * y;
(*ELSIF G_Sensors.fWinchEncoderPosition < fWinchEndUp_encoder AND NOT (G_Engineer_HMI.bEndStopOverride) THEN
	G_Engineer_HMI.bEndStopUpActive := TRUE;
	G_Engineer_HMI.bEndStopDownActive := FALSE;
	fWinchValveNormalizedInput := LIMIT(-1.0, fWinchValveInput, 0.0);*)
ELSE
	G_Engineer_HMI.bEndStopUpActive := FALSE;
	G_Engineer_HMI.bEndStopDownActive := FALSE;
	fWinchValveNormalizedInput := fWinchValveInput;
END_IF


//////////End Stop/////////////
IF G_Sensors.fWinchEncoderPosition > fWinchEndDown_encoder AND NOT (G_Engineer_HMI.bEndStopOverride) THEN
	G_Engineer_HMI.bEndStopUpActive := FALSE;
	G_Engineer_HMI.bEndStopDownActive := TRUE;
	fWinchValveNormalizedInput := LIMIT(0.0, fWinchValveInput, 1.0);
ELSIF G_Sensors.fWinchEncoderPosition < fWinchEndUp_encoder AND NOT (G_Engineer_HMI.bEndStopOverride) THEN
	G_Engineer_HMI.bEndStopUpActive := TRUE;
	G_Engineer_HMI.bEndStopDownActive := FALSE;
	fWinchValveNormalizedInput := LIMIT(-1.0, fWinchValveInput, 0.0);
ELSE
	G_Engineer_HMI.bEndStopUpActive := FALSE;
	G_Engineer_HMI.bEndStopDownActive := FALSE;
	fWinchValveNormalizedInput := fWinchValveInput;
END_IF


////////PCV output/////////////
fbWinchValveOutput(
	bEnable := bEnableWinch,
	bDeadBandCompOn := G_Parameters.stParam.bWinchDeadBandCompOn,
	stValveDeadBand := G_Parameters.stParam.stWinchValveDeadBand,
	fNormalizedInput := fWinchValveNormalizedInput,
	bEnableValveOutput => bEnableValveOutputWinch,
	nOutput => G_IO.fWinchValveOut
	);
	
	//Gjør input til ventilen global
	G_Sensors.fWinchValveOutNormalized := fWinchValveNormalizedInput;

///////////////////// Displacement ////////////////////////////// tidligere sto denne under winch
IF (eStatus = E_Status.Running) AND G_IO.bDisplacementEnable THEN 
	bEnableDisplacement := TRUE;
ELSE
	bEnableDisplacement := FALSE;
END_IF

/////////Displacement Control///////////
IF G_Engineer_HMI.bJoystick_slider_active THEN
	G_Engineer_HMI.fDisplacement_target := G_Sensors.fJoystickNormalizedX;
END_IF


fbDisplacementControl(
	bEnable := G_Engineer_HMI.bDisplacement_target_active AND eStatus = E_Status.Running,
	fDisplacementNormalizedInput := G_Engineer_HMI.fDisplacement_target,
	fYokeNormalizedFeedback := G_Sensors.fYokeNormalizedFeedback,
	fNormalizedOutput => fDisplacementControl_output
	);
	

// Når displacement ikke er enabled blir den satt til 1 (helt åpen) definert oppe i variabler

IF bEnableDisplacement THEN
	fDisplacementControlSignal := G_Sensors.fJoystickNormalizedZ; //Kobler displacement til Z på joystick
	
ELSIF G_Engineer_HMI.bDisplacement_target_active THEN
	fDisplacementControlSignal := fDisplacementControl_output;
	
ELSIF G_Engineer_HMI.bSineDisplacement THEN
	fDisplacementControlSignal := G_Motion_Control.fDisplacementControlSignal_sine;
	
ELSE
	fDisplacementControlSignal := fDisplacementNormalizedInput;
END_IF


	IF G_Engineer_HMI.bSecondaryStartPosEnable THEN
		fDisplacementControlSignal := G_Motion_Control.fDisplacementControlSignal_Secondary;
	END_IF


/////////DCV////////
fbDisplacementValveOutput(
	bEnable := eStatus = E_Status.Running,
	bDeadbandCompOn := G_Parameters.stParam.bDisplacementDeadBandCompOn,
	stValveDeadBand := G_Parameters.stParam.stDisplacementValveDeadBand,
	fNormalizedInput := fDisplacementControlSignal,
	bEnableValveOutput => bEnableValveOutputDisp,
	nOutput => G_IO.fWinchPDCVOut
	);
	
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>