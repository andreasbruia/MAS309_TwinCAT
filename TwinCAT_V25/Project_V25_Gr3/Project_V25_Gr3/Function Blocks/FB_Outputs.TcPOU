<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Outputs" Id="{c3b6ff0e-0108-484e-aa5d-46cb83b00d7a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Outputs
VAR_INPUT
	eStatus 			: E_Status;
	
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbWinchValveOutput 				: FB_ValveOutput;
	fbDisplacementValveOutput 		: FB_DisplacementValveOutput;	
	
	fDisplacementControlSignal		: LREAL;
	fDisplacementNormalizedInput 	: LREAL := 1.0;

	bEnableWinch 					: BOOL;
	bEnableDisplacement				: BOOL;
	bEnableMotion					: BOOL;
	fWinchValveInput 				: LREAL;
	fWinchValveNormalizedInput  	: LREAL;
	bEnableValveOutputWinch 		: BOOL; 
	bEnableValveOutputDisp	 		: BOOL;
	
	//Endpos
	
	fWinchEndUp_encoder				:LREAL := 8972.8578622110326;
	fWinchEndDown_encoder			:LREAL := 10900.949416342413;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF eStatus = E_Status.Running THEN
	G_IO.bEnablePCDV := TRUE;
	G_IO.bWinchValveEnable := TRUE;
ELSE
	G_IO.bEnablePCDV := FALSE;	
	G_IO.bWinchValveEnable := FALSE;
END_IF

bEnableMotion := G_IO.bWinchEnable;

///////////////////// Winch //////////////////////////////
IF (eStatus = E_Status.Running) AND bEnableMotion THEN 
	G_IO.bOpenBrakes := TRUE;
	bEnableWinch := TRUE;
ELSE
	G_IO.bOpenBrakes := FALSE;
	bEnableWinch := FALSE;
END_IF

///////////////////// Displacement //////////////////////////////
IF (eStatus = E_Status.Running) AND G_IO.bDisplacementEnable THEN 
	bEnableDisplacement := TRUE;
ELSE
	bEnableDisplacement := FALSE;
END_IF

fWinchValveInput := G_Sensors.fJoystickNormalizedY; // Kanksje ikke nødvendig bare bruke Global verdi i stedet?

// Legge inn endstop override her
IF G_Sensors.fWinchEncoderPosition > fWinchEndDown_encoder AND NOT (HMI.bEndStopOverride) THEN
	HMI.bEndStopUpActive := FALSE;
	HMI.bEndStopDownActive := TRUE;
	fWinchValveNormalizedInput := LIMIT(0.0, fWinchValveInput, 1.0);
ELSIF G_Sensors.fWinchEncoderPosition < fWinchEndUp_encoder AND NOT (HMI.bEndStopOverride) THEN
	HMI.bEndStopUpActive := TRUE;
	HMI.bEndStopDownActive := FALSE;
	fWinchValveNormalizedInput := LIMIT(-1.0, fWinchValveInput, 0.0);
ELSE
	HMI.bEndStopUpActive := FALSE;
	HMI.bEndStopDownActive := FALSE;
	fWinchValveNormalizedInput := fWinchValveInput;
END_IF

fbWinchValveOutput(
	bEnable := bEnableWinch,
	bDeadBandCompOn := G_Parameters.stParam.bWinchDeadBandCompOn,
	stValveDeadBand := G_Parameters.stParam.stWinchValveDeadBand,
	fNormalizedInput := fWinchValveNormalizedInput,
	bEnableValveOutput => bEnableValveOutputWinch,
	nOutput => G_IO.fWinchValveOut
	);


// Når displacement ikke er enabled blir den satt til 1 (helt åpen) definert oppe i variabler
IF bEnableDisplacement THEN
	fDisplacementControlSignal := G_Sensors.fJoystickNormalizedZ; //Koblrt displacement til Z på joystick
ELSE
	fDisplacementControlSignal := fDisplacementNormalizedInput;
END_IF

fbDisplacementValveOutput(
	bEnable := bEnableDisplacement,
	bDeadbandCompOn := G_Parameters.stParam.bDisplacementDeadBandCompOn,
	stValveDeadBand := G_Parameters.stParam.stDisplacementValveDeadBand,
	fNormalizedInput := fDisplacementControlSignal,
	bEnableValveOutput => bEnableValveOutputDisp,
	nOutput => G_IO.fWinchPDCVOut
	);
	







]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>