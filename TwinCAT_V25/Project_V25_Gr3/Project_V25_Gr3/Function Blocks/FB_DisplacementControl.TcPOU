<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_DisplacementControl" Id="{06b81b3f-2d47-4af7-b8ab-6b28ad67bc37}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DisplacementControl 
VAR_INPUT
	bEnable 						: BOOL; 
	
	fDisplacementNormalizedInput 	: LREAL; 
	fYokeNormalizedFeedback 		: LREAL; 
END_VAR
VAR_OUTPUT
	fNormalizedOutput 				: LREAL; 
END_VAR

VAR PERSISTENT
	fProportionalGain 				: LREAL;
	fIntegralGain					: LREAL;
	fDerivateGain					: LREAL;
END_VAR

VAR
	fbPID_controller				: FB_PID_controller;	
	fYoke_error						: LREAL;
	fProportinalGain_output			: LREAL;
	fIntegralGain_output			: LREAL;
	fDerivateGain_output			: LREAL;
END_VAR	

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bEnable THEN
	//Closed loop error
	fYoke_error := fDisplacementNormalizedInput - fYokeNormalizedFeedback;
	G_PID_Tuning.fYoke_error := fYoke_error; //Make the variable global for OPC UA plotting
	
	//Write to PGain
	IF NOT(G_Engineer_HMI.bPenable_dis_write) THEN
	G_Engineer_HMI.fProportionalgain_dis := fProportionalGain; //Update to the persistent variable
	ELSE
	fProportionalGain := G_Engineer_HMI.fProportionalgain_dis; //Connect the gain to the global HMI
	END_IF
	
	//Write to IGain
	IF NOT(G_Engineer_HMI.bIenable_dis_write) THEN
	G_Engineer_HMI.fIntegralgain_dis := fIntegralGain; //Update to the persistent variable
	ELSE
	fIntegralGain := G_Engineer_HMI.fIntegralgain_dis; //Connect the gain to the global HMI
	END_IF
	
	//Write to DGain
	IF NOT(G_Engineer_HMI.bDenable_dis_write) THEN
	G_Engineer_HMI.fDerivativegain_dis := fDerivateGain; //Update to the persistent variable
	ELSE
	fDerivateGain := G_Engineer_HMI.fDerivativegain_dis; //Connect the gain to the global HMI
	END_IF
	
	fbPID_controller(
		ssMethodType := BOOL_TO_SINT(bEnable),
		error := fYoke_error,
		Int_error_threshold := G_PID_Tuning.Int_error_threshold,
		P_enable := G_Engineer_HMI.bPenable_dis,
		I_enable := G_Engineer_HMI.bIenable_dis,
		D_enable := G_Engineer_HMI.bDenable_dis,
		K_p := fProportionalGain,
		K_i := fIntegralGain,
		K_d := fDerivateGain,
		P_output => fProportinalGain_output,
		I_output => fIntegralGain_output,
		D_output => fDerivateGain_output
		);
	
	//Error times PGain
	fProportinalGain_output := fProportinalGain_output;
	G_PID_Tuning.fProportinalGain_output := fProportinalGain_output;
	//Error times IGain
	fIntegralGain_output := fIntegralGain_output;
	G_PID_Tuning.fIntegralGain_output := fIntegralGain_output;
	//Error times DGain
	fDerivateGain_output := fDerivateGain_output;
	G_PID_Tuning.fDerivateGain_output := fDerivateGain_output;
	
	//Normalized Outputsignal
	fNormalizedOutput := LIMIT(-1,fProportinalGain_output + fIntegralGain_output + fDerivateGain_output,1);
	G_PID_Tuning.PID_output := fNormalizedOutput;
	
ELSE 
	fNormalizedOutput := 0.0; // Ingen output uten aktivering
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>