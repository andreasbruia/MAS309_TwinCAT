<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_DisplacementControl" Id="{06b81b3f-2d47-4af7-b8ab-6b28ad67bc37}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DisplacementControl 
VAR_INPUT
	bEnable 						: BOOL; 
	
	fDisplacementNormalizedInput 	: LREAL; 
	fYokeNormalizedFeedback 		: LREAL; 
END_VAR
VAR_OUTPUT
	fNormalizedOutput 				: LREAL; 
END_VAR

VAR PERSISTENT
	fProportionalGain 				: LREAL := 1.0;
	fIntegralGain					: LREAL;
	fDerivateGain					: LREAL;
END_VAR

VAR
	fbPID_controller				: FB_PID_controller;
	fbPID_new						: FB_PID_new;
	fYoke_error						: LREAL;
	fProportinalGain_output			: LREAL;
	fIntegralGain_output			: LREAL;
	fDerivateGain_output			: LREAL;
END_VAR	

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bEnable THEN
	
	//Write to PGain
	IF NOT(G_Engineer_HMI.bPenable_dis_write) THEN
	G_Engineer_HMI.fProportionalgain_dis := fProportionalGain; //Update to the persistent variable
	ELSE
	fProportionalGain := G_Engineer_HMI.fProportionalgain_dis; //Connect the gain to the global HMI
	END_IF
	
	//Write to IGain
	IF NOT(G_Engineer_HMI.bIenable_dis_write) THEN
	G_Engineer_HMI.fIntegralgain_dis := fIntegralGain; //Update to the persistent variable
	ELSE
	fIntegralGain := G_Engineer_HMI.fIntegralgain_dis; //Connect the gain to the global HMI
	END_IF
	
	//Write to DGain
	IF NOT(G_Engineer_HMI.bDenable_dis_write) THEN
	G_Engineer_HMI.fDerivativegain_dis := fDerivateGain; //Update to the persistent variable
	ELSE
	fDerivateGain := G_Engineer_HMI.fDerivativegain_dis; //Connect the gain to the global HMI
	END_IF
	

		
		fbPID_new(
	ssMethodType := BOOL_TO_SINT(bEnable),
	fSignalReference := fDisplacementNormalizedInput,
	fSignalFeedback := fYokeNormalizedFeedback,
	fProportionalGain := fProportionalGain,
	fIntegralGain := fIntegralGain,
	bActivateIntegralControl := G_Engineer_HMI.bIenable_dis,
	bEnable := bEnable,
	bIntegralControlReset := FALSE,
	bActivateDerivativeControl := FALSE,
	fDerivativeGain := fDerivateGain,
	fClosedLoopSignal => fNormalizedOutput,
	fSignalError =>G_PID_Tuning.fYoke_error,
	P_out => G_PID_Tuning.fProportinalGain_output_dis,
	I_out => G_PID_Tuning.fIntegralGain_output_dis,
	D_out => G_PID_Tuning.fDerivateGain_output_dis
	);	
	

	//Make Output global for plot
	G_PID_Tuning.PID_output_dis := fNormalizedOutput;
	
ELSE 
	fNormalizedOutput := 0.0; // Ingen output uten aktivering
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>