<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PID_controller" Id="{043fcf32-d988-4eaa-bed1-efdb0e9e1e3c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PID_controller
VAR_INPUT
	ssMethodType			: SINT;
	error					: LREAL;
	Int_error_threshold 	: LREAL;
	P_enable				: BOOL;
	I_enable				: BOOL;
	D_enable				: BOOL;
	K_p						: LREAL;
	K_i						: LREAL;
	K_d						: LREAL;
END_VAR
VAR_OUTPUT
	P_output: LREAL;
	I_output: LREAL;
	D_output: LREAL;
END_VAR
VAR
	rtb_TSamp: LREAL;
	c_DiscreteTimeIntegrator_DS: LREAL;
	UD_DSTATE: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE ssMethodType OF
    0: 
        (* SystemInitialize for Atomic SubSystem: '<Root>/PID_controller' *)
        (* InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)
        c_DiscreteTimeIntegrator_DS := 0.0;
        (* InitializeConditions for UnitDelay: '<S2>/UD'
         *
         * Block description for '<S2>/UD':
         *  
         *  Store in Global RAM *)
        UD_DSTATE := 0.0;
        (* End of SystemInitialize for SubSystem: '<Root>/PID_controller' *)
    1: 
        (* Outputs for Atomic SubSystem: '<Root>/PID_controller' *)
        (* Switch: '<S1>/Switch' *)

        IF P_enable THEN 
            (* Outport: '<Root>/P_output' incorporates:
             *  Product: '<S1>/Product' *)
            P_output := K_p * error;
        ELSE 
            (* Outport: '<Root>/P_output' incorporates:
             *  Constant: '<S1>/Constant' *)
            P_output := 0.0;
        END_IF;

        (* End of Switch: '<S1>/Switch' *)
        

        (* Switch: '<S1>/Switch1' *)

        IF I_enable THEN 
            (* Outport: '<Root>/I_output' incorporates:
             *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator' *)
            I_output := c_DiscreteTimeIntegrator_DS;
        ELSE 
            (* Outport: '<Root>/I_output' incorporates:
             *  Constant: '<S1>/Constant1' *)
            I_output := 0.0;
        END_IF;

        (* End of Switch: '<S1>/Switch1' *)
        

        (* SampleTimeMath: '<S2>/TSamp' incorporates:
         *  Product: '<S1>/Product2'
         *
         * About '<S2>/TSamp':
         *  y = u * K where K = 1 / ( w * Ts )
         *   *)
        rtb_TSamp := (K_d * error) * 100.0;
        (* Switch: '<S1>/Switch2' *)

        IF D_enable THEN 
            (* Outport: '<Root>/D_output' incorporates:
             *  Sum: '<S2>/Diff'
             *  UnitDelay: '<S2>/UD'
             *
             * Block description for '<S2>/Diff':
             *  
             *  Add in CPU
             *
             * Block description for '<S2>/UD':
             *  
             *  Store in Global RAM *)
            D_output := rtb_TSamp - UD_DSTATE;
        ELSE 
            (* Outport: '<Root>/D_output' incorporates:
             *  Constant: '<S1>/Constant2' *)
            D_output := 0.0;
        END_IF;

        (* End of Switch: '<S1>/Switch2' *)
        

        (* Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
         *  Product: '<S1>/Product1' *)
       
		IF ABS(error) < Int_error_threshold THEN
			c_DiscreteTimeIntegrator_DS := 0.0;
		ELSE
			c_DiscreteTimeIntegrator_DS := ((K_i * error) * 0.01) + c_DiscreteTimeIntegrator_DS;
		END_IF
		 
        (* Update for UnitDelay: '<S2>/UD'
         *
         * Block description for '<S2>/UD':
         *  
         *  Store in Global RAM *)
        UD_DSTATE := rtb_TSamp;
        (* End of Outputs for SubSystem: '<Root>/PID_controller' *)
END_CASE;


]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>