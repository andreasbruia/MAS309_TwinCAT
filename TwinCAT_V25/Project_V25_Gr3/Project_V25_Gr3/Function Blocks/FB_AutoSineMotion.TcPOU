<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_AutoSineMotion" Id="{7aa33ba2-6f61-4e54-a151-28e681b8e51e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AutoSineMotion
VAR_INPUT 
	fPosition : LREAL; 
	bStartPosOK						: BOOL;
	bAutoEnable : BOOL; 
	// eStatus : BOOL;
    fSineReferenceSignal                  : LREAL; 
END_VAR

VAR PERSISTENT
	fProportionalGain 				: LREAL;
	fIntegralGain					: LREAL;
	fDerivateGain					: LREAL;
END_VAR

VAR_OUTPUT
	fWinchValveNormalizedInput 		: LREAL;
END_VAR
VAR
	bEnable : BOOL; // Forblir TRUE bnår og etter bStartPosOk er TRUE?
    fbPID_controller				: FB_PID_controller;
	fPosition_error					: LREAL;
	fProportinalGain_output			: LREAL;
	fIntegralGain_output			: LREAL;
	fDerivateGain_output			: LREAL;
	bEnableValveOutputWinch			: BOOL;	 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bStartPosOK AND bAutoEnable THEN
	bEnable := TRUE; 
	
	fPosition_error := fPosition - fSineReferenceSignal;
	
	G_Motion_Control.fPosition_error_SineMotion := fPosition_error;
	

// Write to HMI
//PGain:
IF NOT(G_Engineer_HMI.bPenable_MOOG_write) THEN
	G_Engineer_HMI.fProportionalgain_MOOG := fProportionalGain; // SKjønner ikke helt det her
ELSE
	fProportionalGain := G_Engineer_HMI.fProportionalgain_MOOG;
END_IF

//IGain: 
IF NOT(G_Engineer_HMI.bIenable_MOOG_write) THEN
	G_Engineer_HMI.fIntegrationalgain_MOOG := fIntegralGain;
ELSE
	fIntegralGain := G_Engineer_HMI.fIntegrationalgain_MOOG;
END_IF


fbPID_controller(
		ssMethodType := BOOL_TO_SINT(bEnable),
		error := fPosition_error,
		Int_error_threshold := G_PID_Tuning.Int_error_threshold,
		P_enable := G_Engineer_HMI.bPenable_MOOG,
		I_enable := G_Engineer_HMI.bIenable_MOOG,
		D_enable := FALSE,
		K_p := fProportionalGain,
		K_i := fIntegralGain,
		K_d := fDerivateGain,
		P_output => fProportinalGain_output,
		I_output => fIntegralGain_output,
		D_output => fDerivateGain_output
		);
		
		//Error times PGain
	fProportinalGain_output := fProportinalGain_output;
	G_PID_Tuning.fProportinalGain_output_MOOG := fProportinalGain_output;
	//Error times IGain
	fIntegralGain_output := fIntegralGain_output;
	G_PID_Tuning.fIntegralGain_output_MOOG:= fIntegralGain_output;
	//Error times DGain
	fDerivateGain_output := fDerivateGain_output;
	G_PID_Tuning.fDerivateGain_output_MOOG := fDerivateGain_output;
	
	//Normalized Outputsignal
		
		fWinchValveNormalizedInput := LIMIT(-1, -1*(fProportinalGain_output + fIntegralGain_output + fDerivateGain_output), 1);
		G_PID_Tuning.PID_output_MOOG := fWinchValveNormalizedInput;
		
ELSIF NOT (bAutoEnable) THEN;
	bEnable := FALSE;
	G_Engineer_HMI.bAutoSineMotionEnable := FALSE;
	fWinchValveNormalizedInput := 0.0;

END_IF


]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>