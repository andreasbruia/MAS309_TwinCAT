<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Outputs" Id="{b8193c58-2f43-4761-a988-c2f0a47f4bad}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Outputs
VAR 
bEnableMotion					: BOOL;

//Winch
bEnableWinch   					: BOOL;  
fWinchValveInput 				: LREAL; 
bEnableValveOutputWinch			: BOOL;
fWinchValveNormalizedInput		: LREAL;

//Displacement
bEnableDisplacement 			: BOOL;  
fDisplacementNormalizedInput	: LREAL := 1.0; //Dette er en start verdi for primærstyring slik at Yoke står på 1
fDisplacementControlSignal		: LREAL; //Dette er signalet som endrer displacement
bEnableValveOutputDisp	 		: BOOL;
fDisplacementControl_output		: LREAL;

//Function Blocks
fbWinchValveOutput				: FB_ValveOutput;
fbDisplacementValveOutput		: FB_DisplacementValveOutput;
fbDisplacementControl			: FB_DisplacementControl;


//Soft End stop legge i FB senere
u_Neg								: LREAL;
y_Neg								: LREAL;
u_Pos								: LREAL;
y_Pos								: LREAL;



//StepInput displacement
T1s									: TIME := T#1S;
fbClock								: FB_Clock;
fStepTime							: LREAL;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF MAIN.eStatus = E_Status.Running THEN
	G_IO.bEnablePCDV := TRUE;
	G_IO.bWinchValveEnable := TRUE;
ELSE
	G_IO.bEnablePCDV := FALSE;	
	G_IO.bWinchValveEnable := FALSE;
END_IF

////////////////Enable Motion logic/////////////////////////
IF P_MotionControl.bAutoEnable OR ((P_MotionControl.bManualEnable OR P_MotionControl.bSecondaryManualEnable) AND G_IO.bWinchEnable) THEN
	bEnableMotion := TRUE;
ELSE 
		bEnableMotion := FALSE; 
END_IF

//////////////Winch////////////////
IF (MAIN.eStatus = E_Status.Running) AND bEnableMotion THEN
	G_IO.bOpenBrakes := TRUE; 
	bEnableWinch := TRUE; 
 ELSE 
	 G_IO.bOpenBrakes := FALSE; 
	 bEnableWinch := FALSE; 
END_IF

///Choose type of Manual control
IF G_Engineer_HMI.bManualControl_enable AND P_MotionControl.bManualEnable THEN
	fWinchValveInput := LIMIT(-1,G_Motion_Control.fWinchValveInput_joystick_posref,1);
ELSIF P_MotionControl.bManualEnable AND G_Engineer_HMI.bPrimary_Control_active THEN //vurdere om denne skal være elsif eller bare else
	fWinchValveInput := G_Sensors.fJoystickNormalizedY;
ELSIF  P_MotionControl.bSecondaryManualEnable AND G_Engineer_HMI.bSecondary_Control_active THEN
	fWinchValveInput := 1.0;
END_IF

////////Primary Auto Sine Motion////////
(*IF P_MotionControl.bAutoEnable  THEN
	IF G_Engineer_HMI.bAutoStartPosEnable THEN
		fWinchValveInput := G_Motion_Control.fWinchValveNormalizedInput;
		IF P_MotionControl.bStartPosOK THEN
			G_Engineer_HMI.bAutoStartPosEnable := FALSE;
			G_Engineer_HMI.bAutoSineMotionEnable := TRUE;
		END_IF
	ELSIF G_Engineer_HMI.bAutoSineMotionEnable THEN
		fWinchValveInput := G_Motion_Control.fWinchValveNormalizedInput_sine;
	END_IF
END_IF*)

IF P_MotionControl.bAutoEnable  AND G_Engineer_HMI.bAutoStartPosEnable THEN
	fWinchValveInput := G_Motion_Control.fWinchValveNormalizedInput;
END_IF

IF P_MotionControl.bAutoEnable  AND G_Engineer_HMI.bAutoSineMotionEnable THEN
	fWinchValveInput := G_Motion_Control.fWinchValveNormalizedInput_sine;
END_IF



//IF Manual or Auto is not selected valveoutput is set to 0.0 kan fjernes om det aldri blir et problem
IF NOT (P_MotionControl.bAutoEnable OR P_MotionControl.bSecondaryAutoEnable) AND NOT (P_MotionControl.bManualEnable OR P_MotionControl.bSecondaryManualEnable) THEN
	fWinchValveInput := 0.0;
END_IF

//////////Soft Stop////////////
u_Neg := LIMIT(0,((G_Sensors.fPayLoadPosition - G_Parameters.stParam.fWinchEndStopNeg ) / ( G_Parameters.stParam.fWinchEndStopNeg_soft -  G_Parameters.stParam.fWinchEndStopNeg)),1);

y_Neg :=  LIMIT(0.1,((3.0*u_Neg*u_Neg)-(2.0*u_Pos*u_Pos*u_Pos)),1);

u_Pos := LIMIT(0,((G_Sensors.fPayLoadPosition - G_Parameters.stParam.fWinchEndStopPos ) / ( G_Parameters.stParam.fWinchEndStopPos_soft -  G_Parameters.stParam.fWinchEndStopPos)),1);

y_Pos :=  LIMIT(0.1,((3.0*u_Pos*u_Pos)-(2.0*u_Pos*u_Pos*u_Pos)),1);

//////////End Stop///////////// skal lage FB på dette
IF G_Sensors.fPayLoadPosition < G_Parameters.stParam.fWinchEndStopNeg_soft AND  G_Sensors.fPayLoadPosition > G_Parameters.stParam.fWinchEndStopNeg AND NOT (G_Engineer_HMI.bEndStopOverride) THEN
	fWinchValveNormalizedInput := LIMIT(-1.0, y_Neg*fWinchValveInput, 1.0);

ELSIF G_Sensors.fPayLoadPosition < G_Parameters.stParam.fWinchEndStopNeg AND NOT (G_Engineer_HMI.bEndStopOverride) THEN
	G_Engineer_HMI.bEndStopUpActive := FALSE;
	G_Engineer_HMI.bEndStopDownActive := TRUE;
	fWinchValveNormalizedInput := LIMIT(0.0, fWinchValveInput, 1.0);
	
ELSIF 	G_Sensors.fPayLoadPosition > G_Parameters.stParam.fWinchEndStopPos_soft AND  G_Sensors.fPayLoadPosition < G_Parameters.stParam.fWinchEndStopPos AND NOT (G_Engineer_HMI.bEndStopOverride) THEN
	fWinchValveNormalizedInput := LIMIT(-1.0, y_Pos*fWinchValveInput, 1.0);
	
ELSIF G_Sensors.fPayLoadPosition > G_Parameters.stParam.fWinchEndStopPos AND NOT (G_Engineer_HMI.bEndStopOverride) THEN
	G_Engineer_HMI.bEndStopUpActive := TRUE;
	G_Engineer_HMI.bEndStopDownActive := FALSE;
	fWinchValveNormalizedInput := LIMIT(-1.0, fWinchValveInput, 0.0);
ELSE
	G_Engineer_HMI.bEndStopUpActive := FALSE;
	G_Engineer_HMI.bEndStopDownActive := FALSE;
	fWinchValveNormalizedInput := fWinchValveInput;
END_IF

fbWinchValveOutput(
	bEnable := bEnableWinch,
	bDeadBandCompOn := G_Parameters.stParam.bWinchDeadBandCompOn,
	stValveDeadBand := G_Parameters.stParam.stWinchValveDeadBand,
	fNormalizedInput := fWinchValveNormalizedInput,
	bEnableValveOutput => bEnableValveOutputWinch,
	nOutput => G_IO.fWinchValveOut
);


//////////////Displacement/////////
IF (MAIN.eStatus = E_Status.Running) AND G_IO.bDisplacementEnable THEN 
	bEnableDisplacement := TRUE;
ELSE
	bEnableDisplacement := FALSE;
END_IF



fbDisplacementControl(
	bEnable := G_Engineer_HMI.bDisplacement_target_active AND MAIN.eStatus = E_Status.Running,
	fDisplacementNormalizedInput := G_Engineer_HMI.fDisplacement_target,
	fYokeNormalizedFeedback := G_Sensors.fYokeNormalizedFeedback,
	fNormalizedOutput => fDisplacementControl_output
	);



//Dette avgjør hvilket pådrag som skal sendes til DCV
IF bEnableDisplacement THEN
	fDisplacementControlSignal := G_Sensors.fJoystickNormalizedY;
ELSIF G_Engineer_HMI.bDisplacement_target_active THEN
	fDisplacementControlSignal := fDisplacementControl_output;
ELSIF G_Engineer_HMI.bManual_Secondary_joyposref_enable THEN
	fDisplacementControlSignal := LIMIT(-1.0,G_Motion_Control.fSCVInput_joystick_posref_secondary,1.0);
ELSIF G_Engineer_HMI.bStepInput THEN
		fbClock(
			bEnable := G_Engineer_HMI.bStartStepInput,
			fTime => fStepTime
			);
		IF fStepTime < G_Engineer_HMI.fDuration AND G_Engineer_HMI.bStartStepInput THEN
			fDisplacementControlSignal := G_Engineer_HMI.fStepInput / 10000.0;
			
		ELSE
			fDisplacementControlSignal := 0.0;
			G_Engineer_HMI.bStartStepInput := FALSE;
		END_IF
ELSE	
	fDisplacementControlSignal := fDisplacementNormalizedInput;
END_IF

/////////Displacement Control///////////

//For å justere med x akse
IF G_Engineer_HMI.bJoystick_slider_active THEN
	G_Engineer_HMI.fDisplacement_target := LIMIT(0.08,G_Sensors.fJoystickNormalizedX,1.0);
	
	
END_IF


fbDisplacementValveOutput(
	bEnable := (MAIN.eStatus = E_Status.Running),
	bDeadBandCompOn := G_Parameters.stParam.bDisplacementDeadBandCompOn,
	stValveDeadBand := G_Parameters.stParam.stDisplacementValveDeadBand,
	fNormalizedInput := fDisplacementControlSignal,
	bEnableValveOutput => bEnableValveOutputDisp,
	nOutput => G_IO.fWinchPDCVOut
);

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>