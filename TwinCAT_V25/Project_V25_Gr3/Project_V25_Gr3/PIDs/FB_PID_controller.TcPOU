<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PID_Controller" Id="{d098f1bb-8e17-4660-afcd-57825fdff987}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PID_Controller
VAR_INPUT
	ssMethodType: SINT;
	fSignalReference: LREAL;
	fSignalFeedback: LREAL;
	fProportionalGain: LREAL;
	fIntegralGain: LREAL;
	bIntegralControlReset: BOOL;
	bActivateIntegralControl: BOOL;
	bEnable: BOOL;
	bActivateDerivativeControl: BOOL;
	fDerivativeGain: LREAL;
END_VAR
VAR_OUTPUT
	fClosedLoopSignal: LREAL;
	fSignalError: LREAL;
	P_out: LREAL;
	I_out: LREAL;
	D_out: LREAL;
END_VAR
VAR
	rtb_Uk1: LREAL;
	rtb_Saturation: LREAL;
	rtb_TSamp: LREAL;
	c_DiscreteTimeIntegrator1_D: LREAL;
	UD_DSTATE: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE ssMethodType OF
    0: 
        (* SystemInitialize for Atomic SubSystem: '<Root>/FB_PID_Controller' *)
        (* InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' *)
        c_DiscreteTimeIntegrator1_D := 0.0;
        (* InitializeConditions for UnitDelay: '<S2>/UD'
         *
         * Block description for '<S2>/UD':
         *  
         *  Store in Global RAM *)
        UD_DSTATE := 0.0;
        (* End of SystemInitialize for SubSystem: '<Root>/FB_PID_Controller' *)
    1: 
        (* Outputs for Atomic SubSystem: '<Root>/FB_PID_Controller' *)
        (* Sum: '<S1>/Sum' *)
        fSignalError := fSignalReference - fSignalFeedback;
        (* Product: '<S1>/Product' *)
        P_out := fProportionalGain * fSignalError;
        (* DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' *)

        IF bIntegralControlReset THEN 
            c_DiscreteTimeIntegrator1_D := 0.0;
        END_IF;

        (* Switch: '<S1>/Switch2' incorporates:
         *  Constant: '<S1>/Constant'
         *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' *)

        IF bActivateIntegralControl THEN 
            I_out := c_DiscreteTimeIntegrator1_D;
        ELSE 
            I_out := 0.0;
        END_IF;

        (* End of Switch: '<S1>/Switch2' *)
        

        (* Sum: '<S1>/Sum5' *)
        rtb_Uk1 := P_out + I_out;
        (* Saturate: '<S1>/Saturation' *)

        IF rtb_Uk1 > 1.0 THEN 
            rtb_Saturation := 1.0;
        ELSIF rtb_Uk1 >= -1.0 THEN 
            rtb_Saturation := rtb_Uk1;
        ELSE 
            rtb_Saturation := -1.0;
        END_IF;

        (* End of Saturate: '<S1>/Saturation' *)
        

        (* SampleTimeMath: '<S2>/TSamp' incorporates:
         *  Product: '<S1>/Product2'
         *
         * About '<S2>/TSamp':
         *  y = u * K where K = 1 / ( w * Ts )
         *   *)
        rtb_TSamp := (fSignalError * fDerivativeGain) * 100.0;
        (* Switch: '<S1>/Switch3' incorporates:
         *  Constant: '<S1>/Constant2'
         *  Sum: '<S2>/Diff'
         *  UnitDelay: '<S2>/UD'
         *
         * Block description for '<S2>/Diff':
         *  
         *  Add in CPU
         *
         * Block description for '<S2>/UD':
         *  
         *  Store in Global RAM *)

        IF bActivateDerivativeControl THEN 
            D_out := rtb_TSamp - UD_DSTATE;
        ELSE 
            D_out := 0.0;
        END_IF;

        (* End of Switch: '<S1>/Switch3' *)
        

        (* Switch: '<S1>/Switch1' *)

        IF bEnable THEN 
            (* Sum: '<S1>/Sum2' *)
            fClosedLoopSignal := rtb_Saturation + D_out;
            (* Saturate: '<S1>/Saturation1' *)

            IF fClosedLoopSignal > 1.0 THEN 
                (* Outport: '<Root>/fClosedLoopSignal' *)
                fClosedLoopSignal := 1.0;
            ELSIF fClosedLoopSignal < -1.0 THEN 
                (* Outport: '<Root>/fClosedLoopSignal' *)
                fClosedLoopSignal := -1.0;
            END_IF;

            (* End of Saturate: '<S1>/Saturation1' *)
        ELSE 
            (* Outport: '<Root>/fClosedLoopSignal' incorporates:
             *  Constant: '<S1>/Constant1' *)
            fClosedLoopSignal := 0.0;
        END_IF;

        (* End of Switch: '<S1>/Switch1' *)
        

        (* Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
         *  Product: '<S1>/Divide'
         *  Product: '<S1>/Product1'
         *  Sum: '<S1>/Sum1'
         *  Sum: '<S1>/Sum3' *)
        c_DiscreteTimeIntegrator1_D := (((((rtb_Saturation - rtb_Uk1) / fProportionalGain) + fSignalError) * fIntegralGain) * 0.01) + c_DiscreteTimeIntegrator1_D;

        IF c_DiscreteTimeIntegrator1_D > 1.0 THEN 
            c_DiscreteTimeIntegrator1_D := 1.0;
        ELSIF c_DiscreteTimeIntegrator1_D < -1.0 THEN 
            c_DiscreteTimeIntegrator1_D := -1.0;
        END_IF;

        (* End of Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' *)
        

        (* Update for UnitDelay: '<S2>/UD'
         *
         * Block description for '<S2>/UD':
         *  
         *  Store in Global RAM *)
        UD_DSTATE := rtb_TSamp;
        (* End of Outputs for SubSystem: '<Root>/FB_PID_Controller' *)
END_CASE;


]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>